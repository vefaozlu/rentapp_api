// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique @db.VarChar(55)
  username        String?   @unique @db.VarChar(55)
  firebaseId      String    @unique @db.VarChar(128)
  tenantProfile   Tenant?
  landlordProfile Landlord?
}

model Tenant {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(55)
  email       String? @unique @db.VarChar(55)
  address     String  @db.VarChar(128)
  phoneNumber String  @unique @db.VarChar(15)
  unitRented  Unit?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?    @unique
}

model Landlord {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(55)
  email       String?    @unique @db.VarChar(55)
  address     String     @db.VarChar(128)
  phoneNumber String     @unique @db.VarChar(15)
  properties  Property[]
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?       @unique
}

model Property {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(55)
  address       String         @db.VarChar(128)
  landlord      Landlord       @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId    Int
  units         Unit[]
  announcements Announcement[]
}

model Unit {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(55)
  payPeriod  Int //CHECK ("payPeriod" > 0)
  rentAmount Decimal //CHECK ("rentAmount" > 0)
  deposit    Decimal //CHECK ("deposit" > 0)
  isVacant   Boolean  @default(true)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId   Int?     @unique
}

model Announcement {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(55)
  body       String   @db.VarChar(255)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  date       DateTime @default(now())
}

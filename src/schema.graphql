type Query {
  info: String!
  user: User!
  profile: ProfilePayload!
}

type Mutation {
  # To register a user.

  signup(
    email: EmailString!
    password: NonEmptyString!
    name: NonEmptyString!
    role: Role!
  ): AuthPayload!

  # To login a user.

  login(
    email: EmailString!
    password: NonEmptyString!
    role: Role!
  ): AuthPayload!

  # To create tenant profile. Only landlord role can create tenant profiles.

  createTenant(
    name: NonEmptyString!
    email: EmailString
    address: NonEmptyString!
    phoneNumber: NonEmptyString!
  ): Tenant!

  # To create landlord profile. Only landlord role can create landlord profiles.

  createLandlord(
    name: NonEmptyString!
    email: EmailString
    address: NonEmptyString!
    phoneNumber: NonEmptyString!
  ): Landlord!

  # To create a property. Only landlord role can create properties.

  createProperty(name: NonEmptyString!, address: NonEmptyString!): Property!

  # To create a unit. Only landlord role can create units.

  createUnit(
    name: NonEmptyString!
    payPeriod: Int!
    rentAmount: Int!
    deposit: Int!
    propertyId: Int!
    tenantId: Int
  ): Unit!

  # To create an announcement. Only landlord role can create announcements.

  createAnnouncement(
    title: NonEmptyString!
    body: String
    propertyId: Int!
  ): Announcement!

  # To update a user.

  updateUser(
    id: Int!
    email: NonEmptyString
    password: NonEmptyString
    name: NonEmptyString
  ): User!

  # To update a tenant profile. All roles can update tenant profiles.

  updateTenant(
    id: Int!
    name: NonEmptyString
    email: NonEmptyString
    address: NonEmptyString
    phoneNumber: NonEmptyString
  ): Tenant!

  # To update a landlord profile. Only landlord role can update landlord profiles.

  updateLandlord(
    id: Int!
    name: NonEmptyString
    email: NonEmptyString
    address: NonEmptyString
    phoneNumber: NonEmptyString
  ): Landlord!

  # To update a property. Only landlord role can update properties.

  updateProperty(id: Int!, name: String, address: String): Property!

  # To update a unit. Only landlord role can update units.

  updateUnit(
    id: Int!
    name: NonEmptyString
    payPeriod: Int
    rentAmount: Int
    deposit: Int
    isVacant: Boolean
  ): Unit!

  # To update an announcement. Only landlord role can update announcements.

  updateAnnouncement(
    id: Int!
    title: NonEmptyString
    body: String
  ): Announcement!

  # To update a balance. Only landlord role can update balances.

  updateBalance(id: Int!, balance: Int!): Balance!

  # To delete a user.

  deleteUser(id: Int!): Boolean!

  # To delete a tenant profile. Only landlord role can delete tenant profiles.

  deleteTenant(id: Int!): Boolean!

  # To delete a landlord profile. Only landlord role can delete landlord profiles.

  deleteLandlord(id: Int!): Boolean!

  # To delete a property. Only landlord role can delete properties.

  deleteProperty(id: Int!): Boolean!

  # To delete a unit. Only landlord role can delete units.

  deleteUnit(id: Int!): Boolean!

  # To delete an announcement. Only landlord role can delete announcements.

  deleteAnnouncement(id: Int!): Boolean!

  # To register a tenant to a unit.
  # When a tenant registered to a unit balance object will be updated automaticly.
  # Only landlord role can register tenants to units.

  registerTenantToUnit(tenantId: Int!, unitId: Int!): Unit!

  # To remove a tenant from a unit.
  # When a tenant removed from a unit balance object will be updated automaticly.
  # Only landlord role can register tenants to units.

  removeTenantFromUnit(tenantId: Int!, unitId: Int!): Unit!

  registerUserToTenantProfile(
    email: EmailString!
    name: NonEmptyString!
    phoneNumber: NonEmptyString!
  ): Tenant!
}

type Subscription {
  balance(tenantId: Int!): Balance
}

type AuthPayload {
  token: String
  user: User
}

type ProfilePayload {
  user: User!
  profile: Tenant
  currentRole: Role!
}

type User {
  id: ID!
  email: String!
  username: String!
  firebaseId: String!
  tenantProfile: Tenant
  landlordProfile: Landlord
}

type Tenant {
  id: ID!
  name: String!
  email: String
  address: String
  phoneNumber: String!
  unitRented: Unit
  balance: Balance
}

type Landlord {
  id: ID!
  name: String!
  email: String
  address: String
  phoneNumber: String!
  properties: [Property]!
}

type Property {
  id: ID!
  name: String
  address: String!
  units: [Unit]!
  announcements: [Announcement]!
  landlord: Landlord!
}

type Unit {
  id: ID!
  name: String!
  payPeriod: Int!
  rentAmount: Int!
  deposit: Int!
  isVacant: Boolean
  property: Property!
  tenant: Tenant
}

type Announcement {
  id: ID!
  title: String!
  body: String!
  property: Property!
  date: Date!
}

type Balance {
  id: ID!
  isActive: Boolean!
  balance: Int!
  payPeriod: Int!
  currentPeriodEnd: Date!
  tenant: Tenant!
}

enum Role {
  TENANT
  LANDLORD
  ADMIN
}

scalar NonEmptyString

scalar EmailString

scalar Date
